{
  "useCallback": {
    "prefix": "useCallback",
    "body": "const ${1:functionName} = useCallback(() => {\n\t${2:callback}\n}, [${3:dependencies}])",
    "description": "useCallback",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useContext": {
    "prefix": "useContext",
    "body": "const ${1:value} = useContext(${2:context})",
    "description": "useContext",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": "useDebugValue(${1:value})",
    "description": "useDebugValue",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": "useEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:clearEffect}\n\t}\n}, [${3:dependencies}]",
    "description": "useEffect",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": "useImperativeHandle(${1:refName}, () => ({\n\t${2:handles}\n}), [${3:dependencies}])",
    "description": "useImperativeHandle",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": "useLayoutEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:clearEffect}\n\t}\n}, [${3:dependencies}]",
    "description": "",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": "const ${1:memoName} = useMemo(() => ${2:ReactNodeName}, [${3:dependencies}])",
    "description": "useMemo",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": "const [state, dispatch] = useReducer(${1:reducer}, ${2:defaultValue}, ${3:init})",
    "description": "useReducer",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useRef": {
    "prefix": "useRef",
    "body": "const ${1:refName} = useRef(${3:defaultValue})",
    "description": "useRef",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "useState": {
    "prefix": "useState",
    "body": "const [${1:state}, ${2:setState}] = useState(${3:defaultValue})",
    "description": "useState",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  }
}