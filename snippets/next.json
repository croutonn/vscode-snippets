{
  "getServerSideProps": {
    "prefix": [
      "nget",
      "gssp"
    ],
    "body": "import { GetServerSideProps } from 'next'\n\ntype ${1:$TM_FILENAME_BASE}Params = {\n\tslug: string\n}\n\nexport const getServerSideProps: GetServerSideProps<${1:$TM_FILENAME_BASE}Params> = async (context) => {\n\tconst props: ${1:$TM_FILENAME_BASE}Props = {}\n\n\treturn {\n\t\tprops,\n\t}\n}",
    "description": "Next.js GetServerSideProps",
    "scope": "typescriptreact"
  },
  "getStaticPaths": {
    "prefix": [
      "nget",
      "gsp"
    ],
    "body": "import { GetStaticPaths } from 'next'\n\ntype ${1:$TM_FILENAME_BASE}Params = {\n\tslug: string\n}\n\nexport const getStaticPaths: GetStaticPaths<${1:$TM_FILENAME_BASE}Params> = async (context) => {\n\treturn {\n\t\tpaths: [],\n\t\tfallback: false,\n\t}\n}",
    "description": "Next.js GetStaticPaths",
    "scope": "typescriptreact"
  },
  "getStaticProps": {
    "prefix": [
      "nget",
      "gsp"
    ],
    "body": "import { GetStaticProps } from 'next'\n\ntype ${1:$TM_FILENAME_BASE}Params = {\n\tslug: string\n}\n\ntype ${1:$TM_FILENAME_BASE}Props = {}\n\nexport const getStaticProps: GetStaticProps<${1:$TM_FILENAME_BASE}Params> = async (context) => {\n\tconst props: ${1:$TM_FILENAME_BASE}Props = {}\n\n\treturn {\n\t\tprops,\n\t}\n}",
    "description": "Next.js GetStaticProps",
    "scope": "typescriptreact"
  },
  "NextPageWithLayout": {
    "prefix": [
      "npagel",
      "nextpagewithlayout",
      "npwl"
    ],
    "body": "import * as React from \"react\";\nimport { NextPageWithLayout } from \"next\";\nimport { AppProps } from \"next/app\";\n\ndeclare module \"next\" {\n  export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {\n    getLayout?: (page: React.ReactElement) => React.ReactNode;\n  };\n}\n\ndeclare module \"next/app\" {\n  export type AppPropsWithLayout<P = {}, IP = P> = AppProps<P> & {\n    Component: NextPageWithLayout<P, IP>;\n  };\n}",
    "description": "Next.js Page With Layout Declaration",
    "scope": "typescriptreact"
  },
  "NextPage_SSG": {
    "prefix": [
      "npage",
      "nextpage",
      "npssg"
    ],
    "body": "import * as React from 'react'\nimport { GetStaticPaths, GetStaticProps, NextPage } from 'next'\n\ntype ${1:$TM_FILENAME_BASE}Params = {\n\tslug: string\n}\n\ntype ${1:$TM_FILENAME_BASE}Props = {}\n\nconst ${1:$TM_FILENAME_BASE}: NextPage = ({\n\t${2}\n}: React.PropsWithChildren<${1:$TM_FILENAME_BASE}Props>) => {\n\treturn (\n\t\t<>\n\t\t\t${3}\n\t\t</>\n\t)\n}\n\nconst getStaticPaths: GetStaticPaths<${1:$TM_FILENAME_BASE}Params> = async (context) => {\n\treturn {\n\t\tpaths: [],\n\t\tfallback: false,\n\t}\n}\n\nconst getStaticProps: GetStaticProps<${1:$TM_FILENAME_BASE}Params> = async (context) => {\n\tconst props: ${1:$TM_FILENAME_BASE}Props = {}\n\n\treturn {\n\t\tprops,\n\t}\n}\n\nexport default ${1:$TM_FILENAME_BASE}\nexport { getStaticPaths, getStaticProps }",
    "description": "Next.js Page for SSG",
    "scope": "typescriptreact"
  },
  "NextPage_SSR": {
    "prefix": [
      "npage",
      "nextpage",
      "npssr"
    ],
    "body": "import * as React from 'react'\nimport { GetServerSideProps } from 'next'\n\ntype ${1:$TM_FILENAME_BASE}Params = {\n\tslug: string\n}\n\ntype ${1:$TM_FILENAME_BASE}Props = {}\n\nconst ${1:$TM_FILENAME_BASE}: NextPage = ({\n\t${2}\n}: React.PropsWithChildren<${1:$TM_FILENAME_BASE}Props>) => {\n\treturn (\n\t\t<>\n\t\t\t${3}\n\t\t</>\n\t)\n}\n\nconst getServerSideProps: GetServerSideProps<${1:$TM_FILENAME_BASE}Params> = async (context) => {\n\tconst props: ${1:$TM_FILENAME_BASE}Props = {}\n\n\treturn {\n\t\tprops,\n\t}\n}\n\nexport default ${1:$TM_FILENAME_BASE}\nexport { getServerSideProps }",
    "description": "Next.js Page for SSR",
    "scope": "typescriptreact"
  },
  "PreviewReset_API": {
    "prefix": "nprev",
    "body": "import { NextApiHandler } from \"next\";\n\ntype ResponseBodyType = unknown;\n\nconst previewResetHandler: NextApiHandler<ResponseBodyType> = (\n  request,\n  response\n) => {\n  response.clearPreviewData();\n  response.status(200).end();\n};\n\nexport default previewResetHandler;",
    "description": "Next.js Preview Reset API",
    "scope": "typescript"
  },
  "Preview_API": {
    "prefix": "nprev",
    "body": "import { NextApiHandler } from \"next\";\n\ntype ResponseBodyType = unknown;\n\nconst previewHandler: NextApiHandler<ResponseBodyType> = (\n  request,\n  response\n) => {\n  const previewData = {};\n  response.setPreviewData(previewData);\n  response.status(200).end();\n};\n\nexport default previewHandler;",
    "description": "Next.js Preview API",
    "scope": "typescript"
  },
  "RuntimeConfiguration": {
    "prefix": "nrun",
    "body": "import getConfig from 'next/config'\n\nconst { publicRuntimeConfig, serverRuntimeConfig } = getConfig()",
    "description": "Next.js Runtime Configuration",
    "scope": "typescript,typescriptreact"
  },
  "RuntimeConfigurationDeclaration": {
    "prefix": "nrund",
    "body": "declare module 'next/config' {\n  import type { PublicRuntimeConfig, ServerRuntimeConfig } from '${1}'\n\n  function getConfig<P = PublicRuntimeConfig, S = ServerRuntimeConfig>(): {\n    publicRuntimeConfig: P\n    serverRuntimeConfig: S\n  }\n  export default getConfig\n}",
    "description": "Declaration for Next.js Runtime Configuration",
    "scope": "typescript"
  }
}